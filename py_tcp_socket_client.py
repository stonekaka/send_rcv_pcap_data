import socket
import time
import struct
#import sys

#reload(sys)
#sys.setdefaultencoding('utf-8')

HOST = '172.24.146.250'
PORT = 102

request = 'can you hear me?'

#pcap: S7001.pcap
'''
MAX = 2
PORT = 102
arr_c = ['A', 'C']
arr_s = ['B', 'D']

a = [0x03, 0x00, 0x00, 0x16, 0x11, 0xe0, 0x00, 0x00, 0x00, 0x01, 0x00, 0xc0, 0x01, 0x0a, 0xc1, 0x02, 0x01, 0x00, 0xc2, 0x02, 0x01, 0x02]
b = [0x03, 0x00, 0x00, 0x16, 0x11, 0xd0, 0x00, 0x01, 0x00, 0x01, 0x00, 0xc0, 0x01, 0x0a, 0xc1, 0x02, 0x01, 0x00, 0xc2, 0x02, 0x01, 0x02]
c = [0x03, 0x00, 0x00, 0x19, 0x02, 0xf0, 0x80, 0x32, 0x01, 0x00, 0x00, 0x25, 0x00, 0x00, 0x08, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0xe0]
d = [0x03, 0x00, 0x00, 0x1b, 0x02, 0xf0, 0x80, 0x32, 0x03, 0x00, 0x00, 0x25, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0xe0]

data_a = struct.pack("%dB"%(len(a)),*a)
data_b = struct.pack("%dB"%(len(b)),*b)
data_c = struct.pack("%dB"%(len(c)),*c)
data_d = struct.pack("%dB"%(len(d)),*d)

arr_c[0] = data_a
arr_s[0] = data_b
arr_c[1] = data_c
arr_s[1] = data_d
'''
#pcap: OPCDA-Test.pcap

MAX = 5
PORT = 1059
arr_c = ['A', 'C0', 'C1', 'E', 'G']
arr_s = ['B', '_',  'D1', 'F', '_']

a = [0x05,0x00,0x0b,0x03,0x10,0x00,0x00,0x00,0x8a,0x00,0x3a,0x00,0x02,0x00,0x00,0x00,
0xd0,0x16,0xd0,0x16,0xef,0xad,0x04,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x00,
0x43,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,
0x00,0x00,0x00,0x00,0x04,0x5d,0x88,0x8a,0xeb,0x1c,0xc9,0x11,0x9f,0xe8,0x08,0x00,
0x2b,0x10,0x48,0x60,0x02,0x00,0x00,0x00,0x0a,0x02,0x00,0x00,0x10,0xab,0x17,0x00,
0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00,0x01,0x00,0x00,0x00,0x07,0xb2,0x18,0xa2,
0x09,0x00,0x09,0x00,0x31,0x00,0x00,0x00,0x09,0x00,0x09,0x00,0x28,0x00,0x00,0x00,
0x05,0x01,0x28,0x0a,0x00,0x00,0x00,0x0f,0x4f,0x50,0x43,0x43,0x4c,0x49,0x45,0x4e,
0x54,0x57,0x4f,0x52,0x4b,0x47,0x52,0x4f,0x55,0x50]

b = [0x05,0x00,0x0c,0x03,0x10,0x00,0x00,0x00,0xea,0x00,0xa6,0x00,0x02,0x00,0x00,0x00,
0xd0,0x16,0xd0,0x16,0xef,0xad,0x04,0x00,0x05,0x00,0x31,0x30,0x35,0x39,0x00,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x5d,0x88,0x8a,0xeb,0x1c,0xc9,0x11,
0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60,0x02,0x00,0x00,0x00,0x0a,0x02,0x00,0x00,
0x10,0xab,0x17,0x00,0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00,0x02,0x00,0x00,0x00,
0x12,0x00,0x12,0x00,0x38,0x00,0x00,0x00,0x05,0x82,0x9a,0xa2,0x53,0xde,0xee,0x8e,
0x03,0xab,0x10,0xc7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5c,0x00,0x5c,0x00,
0x4a,0x00,0x00,0x00,0x05,0x01,0x28,0x0a,0x00,0x00,0x00,0x0f,0x4f,0x00,0x50,0x00,
0x43,0x00,0x53,0x00,0x45,0x00,0x52,0x00,0x56,0x00,0x45,0x00,0x52,0x00,0x02,0x00,
0x12,0x00,0x4f,0x00,0x50,0x00,0x43,0x00,0x53,0x00,0x45,0x00,0x52,0x00,0x56,0x00,
0x45,0x00,0x52,0x00,0x01,0x00,0x12,0x00,0x4f,0x00,0x50,0x00,0x43,0x00,0x53,0x00,
0x45,0x00,0x52,0x00,0x56,0x00,0x45,0x00,0x52,0x00,0x04,0x00,0x12,0x00,0x4f,0x00,
0x70,0x00,0x63,0x00,0x53,0x00,0x65,0x00,0x72,0x00,0x76,0x00,0x65,0x00,0x72,0x00,
0x03,0x00,0x12,0x00,0x4f,0x00,0x70,0x00,0x63,0x00,0x53,0x00,0x65,0x00,0x72,0x00,
0x76,0x00,0x65,0x00,0x72,0x00,0x00,0x00,0x00,0x00]

c0 = [0x05,0x00,0x10,0x03,0x10,0x00,0x00,0x00,0xc8,0x00,0xac,0x00,0x02,0x00,0x00,0x00,
0xd0,0x16,0xd0,0x16,0x0a,0x02,0x00,0x00,0x10,0xab,0x17,0x00,0x4e,0x54,0x4c,0x4d,
0x53,0x53,0x50,0x00,0x03,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x7c,0x00,0x00,0x00,
0x18,0x00,0x18,0x00,0x94,0x00,0x00,0x00,0x12,0x00,0x12,0x00,0x48,0x00,0x00,0x00,
0x10,0x00,0x10,0x00,0x5a,0x00,0x00,0x00,0x12,0x00,0x12,0x00,0x6a,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xac,0x00,0x00,0x00,0x05,0x82,0x98,0xa2,0x05,0x01,0x28,0x0a,
0x00,0x00,0x00,0x0f,0x4f,0x00,0x50,0x00,0x43,0x00,0x43,0x00,0x4c,0x00,0x49,0x00,
0x45,0x00,0x4e,0x00,0x54,0x00,0x6f,0x00,0x70,0x00,0x63,0x00,0x61,0x00,0x64,0x00,
0x6d,0x00,0x69,0x00,0x6e,0x00,0x4f,0x00,0x50,0x00,0x43,0x00,0x43,0x00,0x4c,0x00,
0x49,0x00,0x45,0x00,0x4e,0x00,0x54,0x00,0xc5,0x1c,0xb8,0x53,0x62,0x88,0x38,0xc8,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x2a,0x75,0xa5,0x5e,0x53,0x04,0x17,0x00,0x44,0xe5,0x7b,0x14,0x34,0x46,0x30,0xf5,
0x0a,0xcb,0xed,0xe1,0x95,0xf7,0x0d,0x2f]

c1 = [0x05,0x00,0x00,0x83,0x10,0x00,0x00,0x00,0x90,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
0x4c,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x14,0x05,0x00,0x00,
0xa2,0x95,0xe2,0x48,0x5e,0xd9,0xfb,0x92,0x05,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x4d,0x81,0x26,0x59,0xfa,0x7c,0x0e,0x42,0x8a,0x3f,0x1b,0x5c,
0x03,0xa4,0xca,0xa8,0x00,0x00,0x00,0x00,0x0b,0x80,0x00,0x00,0x14,0x05,0x00,0x00,
0x82,0x3d,0xbf,0xec,0x7c,0x27,0x51,0x66,0x05,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
0x01,0x00,0x00,0x00,0x51,0x88,0x16,0x65,0x83,0x57,0xd1,0x11,0x84,0xa0,0x00,0x60,
0x8c,0xb8,0xa7,0xe9,0x01,0x00,0x00,0x00,0x0a,0x02,0x04,0x00,0x10,0xab,0x17,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]

d0 = [0x00]

d1 = [0x05,0x00,0x02,0x03,0x10,0x00,0x00,0x00,0x5c,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x02,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x35,0x0d,0x1c,0x61,0x75,0x18,0x9b,0xe6,
0xe0,0x62,0x23,0xd2,0x11,0xe8,0x56,0x35,0x0c,0x98,0x00,0x00,0x14,0x05,0x00,0x00,
0x82,0x10,0x61,0x11,0xaf,0x13,0xd3,0xc6,0x00,0x00,0x00,0x00]

e = [0x05,0x00,0x0e,0x03,0x10,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
0xd0,0x16,0xd0,0x16,0xef,0xad,0x04,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,
0xe2,0xfd,0x1d,0xf3,0xb6,0x07,0xd2,0x11,0xb2,0xd8,0x00,0x60,0x08,0x3b,0xa1,0xfb,
0x00,0x00,0x00,0x00,0x04,0x5d,0x88,0x8a,0xeb,0x1c,0xc9,0x11,0x9f,0xe8,0x08,0x00,
0x2b,0x10,0x48,0x60,0x02,0x00,0x00,0x00]

f = [0x05,0x00,0x0f,0x03,0x10,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
0xd0,0x16,0xd0,0x16,0xef,0xad,0x04,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x04,0x5d,0x88,0x8a,0xeb,0x1c,0xc9,0x11,0x9f,0xe8,0x08,0x00,
0x2b,0x10,0x48,0x60,0x02,0x00,0x00,0x00]

g = [0x05,0x00,0x00,0x83,0x10,0x00,0x00,0x00,0xf0,0x00,0x10,0x00,0x06,0x00,0x00,0x00,
0xae,0x00,0x00,0x00,0x01,0x00,0x07,0x00,0x0b,0x80,0x00,0x00,0x14,0x05,0x00,0x00,
0x82,0x3d,0xbf,0xec,0x7c,0x27,0x51,0x66,0x05,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x4d,0x81,0x26,0x59,0xfa,0x7c,0x0e,0x42,0x8a,0x3f,0x1b,0x5c,
0x03,0xa4,0xca,0xa8,0x00,0x00,0x00,0x00,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x41,0x00,0x00,0x00,0x4f,0x00,0x50,0x00,0x43,0x00,0x43,0x00,0x4c,0x00,0x49,0x00,
0x45,0x00,0x4e,0x00,0x54,0x00,0x5c,0x00,0x43,0x00,0x3a,0x00,0x5c,0x00,0x50,0x00,
0x72,0x00,0x6f,0x00,0x67,0x00,0x72,0x00,0x61,0x00,0x6d,0x00,0x20,0x00,0x46,0x00,
0x69,0x00,0x6c,0x00,0x65,0x00,0x73,0x00,0x5c,0x00,0x4d,0x00,0x61,0x00,0x74,0x00,
0x72,0x00,0x69,0x00,0x6b,0x00,0x6f,0x00,0x6e,0x00,0x5c,0x00,0x4f,0x00,0x50,0x00,
0x43,0x00,0x5c,0x00,0x45,0x00,0x78,0x00,0x70,0x00,0x6c,0x00,0x6f,0x00,0x72,0x00,
0x65,0x00,0x72,0x00,0x5c,0x00,0x4f,0x00,0x50,0x00,0x43,0x00,0x45,0x00,0x78,0x00,
0x70,0x00,0x6c,0x00,0x6f,0x00,0x72,0x00,0x65,0x00,0x72,0x00,0x2e,0x00,0x65,0x00,
0x78,0x00,0x65,0x00,0x00,0x00,0x00,0x00,0x0a,0x02,0x02,0x00,0x10,0xab,0x17,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]

h = [0x00]

data_a = struct.pack("%dB"%(len(a)),*a)
data_b = struct.pack("%dB"%(len(b)),*b)
data_c0 = struct.pack("%dB"%(len(c0)),*c0)
data_c1 = struct.pack("%dB"%(len(c1)),*c1)
data_d0 = struct.pack("%dB"%(len(d0)),*d0)
data_d1 = struct.pack("%dB"%(len(d1)),*d1)

data_e = struct.pack("%dB"%(len(e)),*e)
data_f = struct.pack("%dB"%(len(f)),*f)
data_g = struct.pack("%dB"%(len(g)),*g)
data_h = struct.pack("%dB"%(len(h)),*h)

arr_c[0] = data_a
arr_s[0] = data_b
arr_c[1] = data_c0
arr_s[1] = data_d0
arr_c[2] = data_c1
arr_s[2] = data_d1
arr_c[3] = data_e
arr_s[3] = data_f
arr_c[4] = data_g
arr_s[4] = data_h


s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))

i = 0
request = arr_c[i]
out = 0
while out != 1:
    #s.sendall(request.encode())
    s.sendall(request)
    print('send done:', request)
    reply = s.recv(1024)

    #print('reply is:', reply.decode())
    print('reply is:', reply)

    print('i:', i)
    if reply == arr_s[i]:
        i = i + 1
        if i == MAX:
            i = 0
            out = 1
        request = arr_c[i]
        print('next request:', request)
    else:
        request = "unknown"
    
    
    #i = i + 1
    time.sleep(1)
s.close()
